{"version":3,"sources":["webpack://food/./js/modules/calc.js","webpack://food/./js/modules/cards.js","webpack://food/./js/modules/forms.js","webpack://food/./js/modules/modal.js","webpack://food/./js/modules/slider.js","webpack://food/./js/modules/tabs.js","webpack://food/./js/modules/timer.js","webpack://food/webpack/bootstrap","webpack://food/./js/script.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["function calc() {\r\n\r\n/*   КАЛЬКУЛЯТОР ------------------------------------ */\r\n\r\nconst result = document.querySelector('.calculating__result span');  /* Куда помещаем результат  */\r\nlet sex, height, weight, age, ratio;   \r\n\r\n    if (localStorage.getItem('sex')) {     \r\n        sex = localStorage.getItem('sex');\r\n    } else {\r\n        sex = 'female';\r\n        localStorage.setItem('sex', 'female');  /* по дефолту выбрали женщину */\r\n    }\r\n\r\n    if (localStorage.getItem('ratio')) {     /* Если в localStorage есть значение ratio то присваиваием ratio это значение. */\r\n        ratio = localStorage.getItem('ratio');\r\n    } else {\r\n        ratio = 1.375;   /* По дефолту Если нет, то присваиваем значение 1.375 и записываем его в localstorage */\r\n        localStorage.setItem('ratio', 1.375);  \r\n    }\r\n\r\nfunction initLocalSettings(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach(elem => {\r\n        elem.classList.remove(activeClass);\r\n        if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n            elem.classList.add(activeClass);\r\n        }\r\n        if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n            elem.classList.add(activeClass);\r\n        }\r\n    });\r\n}\r\n\r\ninitLocalSettings('#gender div', 'calculating__choose-item_active');   /* Проверка класса активности */\r\ninitLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\nfunction calcTotal() {\r\n    if (!sex || !height || !weight || !age || !ratio) {\r\n        result.textContent = '----';\r\n        return;   /* Если что то НЕ ! введено, то return останавливает дальнейший код */\r\n    }\r\n    if (sex === 'female') {   /* если введена Формула для женщин */\r\n        result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\r\n    } else {\r\n        result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\r\n    }\r\n}\r\n\r\ncalcTotal();\r\n\r\n\r\nfunction getStaticInformation(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach(elem => {    /* перебираем элементы что бы установить обработчик событий на каждый элемент, что ыб при клике на подложку не ломалось */\r\n        elem.addEventListener('click', (e) => {\r\n            if (e.target.getAttribute('data-ratio')) {\r\n                ratio = +e.target.getAttribute('data-ratio');\r\n                localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));\r\n            } else {\r\n                sex = e.target.getAttribute('id');\r\n                localStorage.setItem('sex', e.target.getAttribute('id'));\r\n            }\r\n    \r\n            elements.forEach(elem => {\r\n                elem.classList.remove(activeClass);\r\n            });\r\n            e.target.classList.add(activeClass);\r\n    \r\n            calcTotal();\r\n        });\r\n    })\r\n}\r\n\r\ngetStaticInformation('#gender div', 'calculating__choose-item_active');  /* Объявляем функцию и внееё передаюм 2 значения parentSelector, activeClass.  Выбор parentSelector по ID */\r\ngetStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');   /* Выбор parentSelector по классу (обязательно с точкой parentselector) */\r\n\r\n\r\nfunction getDynamicInformation(selector) {\r\n    const input = document.querySelector(selector);\r\n\r\n    input.addEventListener('input', () => {   /* Ссылаемся на id инпута */\r\n\r\n        if (input.value.match(/\\D/g)) {   /* Проверяем есть ли любой символ кроме цифры match(/\\D/g) */\r\n            input.style.border = '1px solid red';  /* тогда красим в красный */\r\n        } else {\r\n            input.style.border = 'none';\r\n        }\r\n\r\n        switch(input.getAttribute('id')) {\r\n            case 'height': \r\n                  height = +input.value;\r\n                  break;\r\n            case 'weight':\r\n                  weight = +input.value;\r\n                  break;\r\n            case 'age':\r\n                  age = +input.value;\r\n                  break;     \r\n        }\r\n\r\n        calcTotal();  /* Вызываем пересчёт каждый раз  */\r\n    });\r\n}\r\n\r\ngetDynamicInformation('#height');  /* Вызываем функцию и передаём в неё ID инпутов  */\r\ngetDynamicInformation('#weight');\r\ngetDynamicInformation('#age');\r\n\r\n\r\n\r\n}\r\n\r\nmodule.exports = calc;","function cards() {\r\n    /*   Используем CLASS Карточки, шаблонизируем   ----------------------------------------------------------------------- */\r\n\r\n    class MenuCard {\r\n        constructor(src, altimg, title, descr, price, parentSelector, ...classes) { /* rest оператор ...название */\r\n            this.src = src;\r\n            this.altimg = altimg;\r\n            this.title = title;\r\n            this.descr = descr;\r\n            this.cena = price;  /* Можно своё название CENA но его использовать в шаблоне везде!!! */\r\n            this.classes = classes;\r\n            this.parent = document.querySelector(parentSelector);   /* DOM элемент  */\r\n            this.transfer = 27;      /* курс валюты */\r\n            this.changeToUAH();     /* вызываем метод для конвертации курса */\r\n        }\r\n        changeToUAH() {              /* создаём метод конвертации */\r\n            this.cena = this.cena * this.transfer;\r\n        }\r\n        render() {      /* Создаём метод шаблон! */\r\n            const element = document.createElement('div');\r\n            /* Создаём условие if */\r\n            if (this.classes.length === 0) {    /* Если не были переданные классы = 0, то element = menu__item и добавляем класс к элементу */\r\n                this.element = 'menu__item';\r\n                element.classList.add(this.element);\r\n            } else {  /* если класс был введён в new MenuCard то идёт переборка массива через forEach что бы добавить классы */\r\n                this.classes.forEach(className => element.classList.add(className));\r\n            }\r\n    \r\n            element.innerHTML = `\r\n                <img src=${this.src} alt=${this.altimg}>\r\n                <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n                <div class=\"menu__item-descr\">${this.descr}</div>\r\n                <div class=\"menu__item-divider\"></div>\r\n                <div class=\"menu__item-price\">\r\n                    <div class=\"menu__item-cost\">Цена:</div>\r\n                    <div class=\"menu__item-total\"><span>${this.cena}</span> $/день</div>\r\n                </div>\r\n            `;\r\n            this.parent.append(element);  /* append - вставляем элемент после parent */\r\n        }\r\n    }\r\n    \r\n    \r\n    /* Отправка данных из db.json на сайт  GET */\r\n    const getResource = async (url) => {   /* async Внутри функции будет асинхронный код */\r\n        const res = await fetch(url);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);  /* Создаём ошибку вручную, если запрос не выполнился */\r\n        }\r\n        return await res.json();  /* await ждёт выполнения функции */\r\n    };\r\n    \r\n    getResource('http://localhost:3000/menu')\r\n    .then(data => {                  /* из промисса выдаётся массив из db.json */\r\n        data.forEach(({img, altimg, title, descr, price}) => {          /* перебираем массив */\r\n            new MenuCard(img, altimg, title, descr, price, '.menu .container').render();   /* Вызываем класс MenuCard созданный выше */    \r\n        });\r\n    });\r\n    \r\n    \r\n    /*   Библиотека AXIOS с помощью неё конвертация из json в js Тогда не нужно создавать функцию getResource что выше !!! */\r\n    // axios.get('http://localhost:3000/menu')  \r\n    //     .then(data =>  {\r\n    //         data.data.forEach(({img, altimg, title, descr, price}) => {      \r\n    //             new MenuCard(img, altimg, title, descr, price, '.menu .container').render();     \r\n    //         });\r\n    //     });\r\n    \r\n    \r\n    /* Можно создать карточки без Шаблона MenuCard !!!   Если нужно создать что то один раз (или не часто повторяющееся)*/\r\n    \r\n    // getResource('http://localhost:3000/menu')\r\n    //         .then(data => createCard(data));\r\n    //     function createCard(data) {\r\n    //         data.forEach(({img, altimg, title, descr, price, transfer}) => {\r\n    //             transfer = 27;\r\n    //             const element = document.createElement('div');\r\n    //             element.classList.add(\"menu__item\");\r\n    //             element.innerHTML = `\r\n    //                 <img src=${img} alt=${altimg}>\r\n    //                 <h3 class=\"menu__item-subtitle\">${title}</h3>\r\n    //                 <div class=\"menu__item-descr\">${descr}</div>\r\n    //                 <div class=\"menu__item-divider\"></div>\r\n    //                 <div class=\"menu__item-price\">\r\n    //                     <div class=\"menu__item-cost\">Цена:</div>\r\n    //                     <div class=\"menu__item-total\"><span>${price * transfer}</span> грн/день</div>\r\n    //                 </div>\r\n    //             `;\r\n    //             document.querySelector(\".menu .container\").append(element);\r\n    //         });\r\n    // }\r\n}\r\n\r\nmodule.exports = cards;","function forms() {\r\n\r\n/*   FORMS -------------------------------------------------------------------------------- */\r\n\r\n\r\nconst forms = document.querySelectorAll('form'); /* Создаём переменную форм и прикрепляем её ко всем формам */\r\n\r\nconst message = {   /* переменная с сообщениями которые вставляем после нажатия на кнопку Отправить */\r\n    loading: 'icons/spinner.svg',\r\n    success: 'Спасибо! Мы с вами свяжемся!',\r\n    failure: 'Что то пошло не так...'\r\n};\r\n\r\n\r\nforms.forEach(item => {   /* Переборка массива т.к. querySelectorAll что бы выбрать все формы.  */\r\n    bindPostData(item);    /* Подвязываем функцию postData к формам переменная - forms */\r\n});\r\n\r\nconst postData = async (url, data) => {   /* async Внутри функции будет асинхронный код */\r\n    const res = await fetch(url, {       /* await ждёт результата запроса того что ниже */\r\n        method:\"POST\",       /* Если проммис попадает на ошибку которая связана с http протоколом, то он не будет ошибочным(reject). */\r\n        headers: {            /* reject будет возникать только при отсутствии сети Offline */\r\n            'Content-type': 'application/json' \r\n        },\r\n        body: data\r\n    });\r\n    return await res.json();  /* await ждёт выполнения функции */\r\n};\r\n\r\nfunction bindPostData(form) {   /* Создаём функцию отправки формы, подвязываем её выше*/\r\n    form.addEventListener('submit', (e) => {   /* по деволту в верстке у кнопок стоит submit */\r\n        e.preventDefault();     /* отменяем дефолтное поведение*/\r\n\r\n        const statusMessage = document.createElement('img');   /* НОВОЕ - Добавляем элемент img\r\n        (Старое-после нажатия на кнопку button submit создаём элемент div \r\n        с классом status и берём текст из переменной message.loading) */\r\n        statusMessage.src = message.loading;            /* в img добавляем атрибут src = message.loading */\r\n        statusMessage.style.cssText = `\r\n            display: block;\r\n            margin: 0 auto;\r\n        `;    /* loading 'Загрузка'  добавляем стили что бы было по центу */\r\n        form.insertAdjacentElement('afterend', statusMessage);  /* Добавляем img после формы */\r\n        /* Или через добавление класса в css Spinner  position absolute,  а в форме position relative */\r\n        // statusMessage.classList.add('spinner');\r\n        // form.append(statusMessage);          /* добавляем наш img / div после формы */\r\n\r\n\r\n        // const request = new XMLHttpRequest(); /* создаём переменную Request с запросом XMLHttpRequest */\r\n        // request.open('POST', 'server.php');  /* Вызыаем метот open для настройки запроса */      \r\n        // request.setRequestHeader('Content-type', 'application/json');  /* Настройка заголовков которые говорят, что приходит серверу. (Отправка не через json - 'multipart/form-data')*/\r\n        \r\n        const formData = new FormData(form);     /* ключ-значение из формы form, которая в postData(form). атрибут name обязательно должен быть у форм в вёрстке */\r\n\r\n        // const object = {};\r\n        // formData.forEach(function(value, key) {  /* Перебираем formData что бы перевести в json формат */\r\n        //     object[key] = value;\r\n        // });\r\n\r\n        const json = JSON.stringify(Object.fromEntries(formData.entries())); /* formData - превращаем из объекта в массив массивов, потом с помощью Object.fromEntries превращаем в объект, а после превращаем в JSON */\r\n\r\n        /* fetch для создания AJAX запросов в замен XMLHttpReques. Fetch API предоставляет интерфейс JavaScript для работы с запросами и ответами HTTP */\r\n        // fetch('server.php', {   /* Создаём запрос на сервер через fetch а не через XMLHttpRequest.   */\r\n        //     method:\"POST\",       /* Если проммис попадает на ошибку которая связана с http протоколом, то он не будет ошибочным(reject). */\r\n        //     headers: {            /* reject будет возникать только при отсутствии сети Offline */\r\n        //         'Content-type': 'application/json' \r\n        //     },\r\n        //     body: JSON.stringify(object)\r\n        // })\r\n\r\n        /* Постим данные с формы в фал db.json в requests */\r\n        postData('http://localhost:3000/requests', json)   /* Рефакторинг того что сверху (вынесли в функцию postData) */\r\n\r\n        .then(data => {             /* Возвращается промис */\r\n            console.log(data);       /* То что вернул сервер */\r\n            showThanksModal(message.success);    /* Добавляем функцию созданную ниже - Спасибо с вами свяжутся */\r\n            statusMessage.remove();      /* Удаляем спинер */\r\n        }).catch(() => {         /* Если что то  пошло не так */\r\n            showThanksModal(message.failure);    /* Вызываем функцию с другим текстом - Что то пошло не так   */\r\n        }).finally(() => {    /* finally метод который срабатывает всегда, не важно предыдущий промисс спешный или нет(catch) */\r\n            form.reset();     /* Вызываем функцию сброса формы */\r\n        });\r\n\r\n        // request.addEventListener('load', () => {\r\n        //     if (request.status === 200) {                    /*Проверяем что всё Ок! 200 - код состояния HTTP Google ! */\r\n        //         console.log(request.response);\r\n        //         showThanksModal(message.success);  /* Добавляем функцию созданную ниже Спасибо с вами свяжутся */\r\n        //         form.reset();                               /* сбрасываем форму */\r\n        //         statusMessage.remove();   /* Удаляем сообщение  */\r\n        //     } else {   /* Если сервер \"упал\"  ТО  выполняется то что else ! */\r\n        //         showThanksModal(message.failure);  /* Вызываем функцию с другим текстом - Что то пошло не так   */\r\n        //     }\r\n        // });\r\n    });\r\n}\r\n\r\n/*  \"Загрузка Модалки\" -------------------------------- */\r\n\r\nfunction showThanksModal(message) {\r\n    const prevModalDialog = document.querySelector('.modal__dialog');\r\n\r\n    prevModalDialog.classList.add('hide');   /* Скрываем модалку modal__dialog по добавлению класса hide */\r\n    openModal();\r\n\r\n    const thanksModal = document.createElement('div');\r\n    thanksModal.classList.add('modal__dialog');  /* Добавляем новый элемент DIV с классом  modal__dialog */\r\n    thanksModal.innerHTML = `   \r\n        <div class=\"modal__content\">\r\n            <div class=\"modal__close\" data-close>×</div>\r\n            <div class=\"modal__title\">${message}</div>\r\n        </div>\r\n    `;  /* Создаём шаблон новой модалки которую добавили выше с текстом благодарности */\r\n    document.querySelector('.modal').append(thanksModal);\r\n    setTimeout(() => {\r\n        thanksModal.remove();\r\n        prevModalDialog.classList.add('show');\r\n        prevModalDialog.classList.remove('hide');\r\n        closeModal();\r\n    }, 4000);\r\n}\r\n  \r\n    fetch('http://localhost:3000/menu')  /* Обращаемся к базе данных взятой из npx json-server db.json*/\r\n    .then(data => data.json()) /*  берём ответ от сервера и превращаем в js объект */\r\n    .then(res => console.log(res));  /* Выводим массив с объектами в консоль */\r\n    \r\n}\r\n\r\nmodule.exports = forms;","function modal() {\r\n    \r\n/*    MODAL  ------------------------------------------------------------------------- */\r\n\r\n/* В css создать классы hide-display=none  и класс show-display=block  */\r\n\r\nconst modalTrigger = document.querySelectorAll('[data-modal]'),    /* задаём кнопки по дата атрибутам  ALL - псевдомассив */\r\n      modal = document.querySelector('.modal');                 /* задаём модальное окно */\r\n    //   modalCloseBtn = document.querySelector('[data-close]');    /* (142 строка) крестик в модальном окне */\r\n\r\n      /* Клик для показа модалка по data-modal */\r\n    // modalTrigger.forEach(btn => {   /* Т.к. псевдомассив, его необходимо перебрать(forEach), что бы срабатывало на все кнопки с дата атрибутом */\r\n    //     btn.addEventListener('click', () => {     /* При клике на кнопку добавляем класс show и убираем hide */\r\n    //         // setTimeout(function() {   /* Внутрь setTimeout поместил действия, что бы была задержка (Можно удалить) */\r\n    //             modal.classList.add('show');   \r\n    //             modal.classList.remove('hide');\r\n    //             document.body.style.overflow = 'hidden';  /* К body добавляем стиль overflow=hidden Что бы не прокручивалась страница */\r\n    //         // }, 500);\r\n    //     });   \r\n    // });  \r\n\r\n\r\n    /* Переносим открытие модалки в Функцию !!!  то что сверху */\r\n    function openModal() {\r\n        modal.classList.add('show');   \r\n        modal.classList.remove('hide');\r\n        document.body.style.overflow = 'hidden';\r\n        clearInterval(modalTimerId);  /* Если мы открыли модалку, то она не будет появляться modalTimerId прописанный ниже */\r\n    }\r\n    modalTrigger.forEach(btn => {   /* Т.к. псевдомассив, его необходимо перебрать(forEach), что бы срабатывало на все кнопки с дата атрибутом */\r\n        btn.addEventListener('click', openModal);  /* Добавляем функцию объявленную выше !!! */  \r\n    });\r\n    \r\n/* Вызов модалки если querySelector !!! без All !!!  то есть по первой кнопки вверствке, для работы со всеми кнопками то что выше!!! , у .modal  в свойствах написано display = none */\r\n    //   modalTrigger.addEventListener('click', () => {     /* При клике на кнопку добавляем класс show и убираем hide */\r\n    //     modal.classList.add('show');   \r\n    //     modal.classList.remove('hide');\r\n    //     document.body.style.overflow = 'hidden';  /* К body добавляем стиль overflow=hidden Что бы не прокручивалась страница */\r\n    //   });\r\n\r\n    function closeModal() {   /* Создаём функцию что бы код не использовать/не прописывать во всех закрытиях по многу раз */\r\n        modal.classList.add('hide');\r\n        modal.classList.remove('show');\r\n        document.body.style.overflow = '';  /* overflow пустой что бы скролл вернулся после закрытия модалки */\r\n    }\r\n\r\n    /* Крестик */\r\n    // modalCloseBtn.addEventListener('click', closeModal);  /* (142 строка)  При клике на КРЕСТИК выполняется эта Функция прописанная ранее */\r\n\r\n    /* Подложка */\r\n    modal.addEventListener('click', (e) => {   /* При клике На подложку/фон закрываем модалку */\r\n        if (e.target === modal || e.target.getAttribute('data-close') == '') {  /* Клик на подложку или КРЕСТИК то модалка закрывается */\r\n            closeModal();  /* Вызываем функцию, что бы она работала После улсовия if */\r\n        }\r\n    });\r\n\r\n      /* ESCAPE */\r\n    document.addEventListener('keydown', (e) => {  /* keydown - по клику какой нибудь кнопки на клавиатуре!!! */\r\n        if ( e.code === \"Escape\" && modal.classList.contains('show')) {   /* проверяем, если содержится класс show в modal то тогда Escape сработает */\r\n            closeModal();\r\n        }\r\n    });\r\n\r\n\r\n    /* Модалка по времени ----------------------------------------------*/\r\n    const modalTimerId = setTimeout(openModal, 50000);   /* Таймаут для появления модалки через секунды после обновления страницы */\r\n\r\n\r\n    /* По скролу вызываем модалку */\r\n    function showModalByScroll() {  /* Создаём функцию , если видимое окно + высота прокрутки >= всей высоте документа, то вызывается функция openModal(); После выполения функции отменяем её в window.removeEventListener*/\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\r\n            openModal();\r\n            window.removeEventListener('scroll', showModalByScroll);\r\n        }\r\n    }\r\n    window.addEventListener('scroll', showModalByScroll);  /* Обработчик для вызова функции showModalByScroll по скролу !!! */\r\n\r\n\r\n/* Через querySelector - ИЛИ  Можно через toggle - переключатель, В модалке обязательно display = none */\r\n//   modalTrigger.addEventListener('click', () => {     \r\n//     modal.classList.toggle('show');\r\n//     document.body.style.overflow = 'hidden';  \r\n//   });\r\n\r\n/* Через querySelectorAll через Перебор forEach   Через Toggle , но подложку тогда надо дорабатывать */\r\n    // modalTrigger.forEach(btn => { \r\n    // btn.addEventListener('click', () => {     \r\n    //     modal.classList.toggle('show');\r\n    //     document.body.style.overflow = 'hidden';  \r\n    // });  \r\n    // });\r\n    // modalCloseBtn.addEventListener('click', () => {\r\n    //     modal.classList.toggle('show');\r\n    //     document.body.style.overflow = '';  \r\n    // });\r\n\r\n\r\n}\r\n\r\nmodule.exports = modal;","function slider() {\r\n    \r\n/* СЛАЙДЕР ------------------------------------------------------- */\r\n\r\nconst slides = document.querySelectorAll('.offer__slide'),  /* Каждые слайды отдельно */\r\n      slider = document.querySelector('.offer__slider'),    /* ГЛАВНАЯ оболочка блока слайдера     ! */\r\n      prev = document.querySelector('.offer__slider-prev'),   /* стрелочки */\r\n      next = document.querySelector('.offer__slider-next'),\r\n      total = document.querySelector('#total'),         /* Общее количество слайдов */\r\n      current = document.querySelector('#current'),     /* текущий слайд */\r\n      slidesWrapper = document.querySelector('.offer__slider-wrapper'),  /* ДЛЯ Карусели */\r\n      slidesField = document.querySelector('.offer__slider-inner'),   /* Сама карусель */\r\n      width = window.getComputedStyle(slidesWrapper).width;  /* Получаем стили (ширину) у окошка через которое будем смотреть на слайдер */\r\n\r\nlet slideIndex = 1;\r\nlet offset = 0;\r\n\r\nif (slides.length < 10) {\r\n    total.textContent = `0${slides.length}`;  /* Если количество слайдов меньше нуля, то подставляем сначала 0 , а потом slides.length = общее количество слайдов */\r\n    current.textContent = `0${slideIndex}`;\r\n} else {\r\n    total.textContent = slides.length;   /* в других случаях просто длинну переменной slides (общее количество слайдов) */\r\n    current.textContent = slideIndex;\r\n}\r\n\r\nslidesField.style.width = 100 * slides.length + '%';   /* ширина всей карусели 100% * длинну всех слайдов */\r\nslidesField.style.display = 'flex';\r\nslidesField.style.transition = '0.7s all';\r\n\r\nslidesWrapper.style.overflow = 'hidden';   /* Скрываем видимость вокруг обёртки  */\r\n\r\nslides.forEach(slide => {\r\n    slide.style.width = width;\r\n});\r\n\r\n/* Добавление Точек */\r\nslider.style.position = 'relative';\r\n\r\nconst indicators = document.createElement('ol'),\r\n      dots = [];             /* переменная Массив, что бы туду положить все точки ниже !  dots.push(dot);  */\r\n\r\nindicators.classList.add('carousel-indicators');    /* в CSS прописан класс ! со стилями или можно добавить здесь через - Ниже!*/\r\nindicators.style.cssText = `\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 15;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-right: 15%;\r\n    margin-left: 15%;\r\n    list-style: none;\r\n`;\r\n\r\nslider.append(indicators);\r\n\r\n\r\n/* создаём цикл , переменная итератор, будет заканчиваться когда меньше длинны slides,  i++ цикл увеличивается на 1 */\r\nfor (let i = 0; i < slides.length; i++) {\r\n    const dot = document.createElement('li');   /* создаём элемент */\r\n    dot.setAttribute('data-slide-to', i + 1);   /* к каждой точке устанавливается дата атрибут и прибавляем нумерацию 1, 2, 3 */\r\n    // dot.style.cssText = `\r\n    //     box-sizing: content-box;\r\n    //     flex: 0 1 auto;\r\n    //     width: 30px;\r\n    //     height: 6px;\r\n    //     margin-right: 3px;\r\n    //     margin-left: 3px;\r\n    //     cursor: pointer;\r\n    //     background-color: #fff;\r\n    //     background-clip: padding-box;\r\n    //     border-top: 10px solid transparent;\r\n    //     border-bottom: 10px solid transparent;\r\n    //     opacity: .5;\r\n    //     transition: opacity .6s ease;\r\n    // `;\r\n    dot.classList.add('dot'); /* или то что свеху! */\r\n    \r\n    if (i == 0) {\r\n        dot.style.opacity = 1;\r\n    }\r\n    indicators.append(dot);  /* Вставляем внутрь indicator(ol) - 'li' */\r\n    dots.push(dot);   /* в dots помещаем dot */\r\n}\r\n\r\n\r\nfunction deleteNotDigits(str) {\r\n    return +str.replace(/\\D/g, '');\r\n}\r\n\r\n\r\nnext.addEventListener('click', () => {\r\n    /* у переменной width (стоковый тип данных добавляем унарный +), методом slice начинаем с 0 символа и отрезаем последние 2 символа */\r\n    /* Метод slice() извлекает часть строки и возвращает новую строку без изменения оригинальной строки.\r\n    (offset == +width.slice(0, width.length - 2) * (slides.length - 1))  */\r\n\r\n    /* Меняем на регулярное выражение */\r\n    if (offset == deleteNotDigits(width) * (slides.length - 1)) {   /* Удаляем все НЕ числа через паттерн */\r\n        offset = 0;\r\n    } else {\r\n        offset += deleteNotDigits(width);\r\n    }\r\n\r\n    slidesField.style.transform = `translateX(-${offset}px)`;  /* трансформируем по оси Х влево на offset */\r\n    \r\n    if(slideIndex == slides.length) {              /* Если конец слайдера то  */\r\n        slideIndex = 1;      /* перемещаемся в начало  */\r\n    } else {\r\n        slideIndex++;                 /* увеличиваем на единицу */\r\n    }\r\n\r\n    if (slides.length < 10) {\r\n        current.textContent = `0${slideIndex}`;\r\n    } else {\r\n        current.textContent = slideIndex;\r\n    }\r\n\r\n    dots.forEach(dot => dot.style.opacity = '.5');   /* Перебираем точки для выставления стилей */\r\n    dots[slideIndex - 1].style.opacity = 1;  /* выбранной точке задаём стиль */\r\n});\r\n\r\nprev.addEventListener('click', () => {\r\n    /* у переменной width (стоковый тип данных добавляем унарный +), методом slice начинаем с 0 символа и отрезаем последние 2 символа */\r\n    if (offset == 0) {    /* Если первый слайд нажимаем на стрелку влево - то */ \r\n        offset = deleteNotDigits(width) * (slides.length - 1);  /* В переменную offset записывается последний слайд который вычисляется по этой формуле */\r\n    } else {\r\n        offset -= deleteNotDigits(width); /* отнимаем ширину слайда */\r\n    }\r\n    \r\n    slidesField.style.transform = `translateX(-${offset}px)`;  /* трансформируем по оси Х влево на offset */\r\n\r\n    if(slideIndex == 1) {       /* когда мы на первом слайде */\r\n        slideIndex = slides.length;       /* перемещаемся на последнюю позицию слайдера */\r\n    } else {\r\n        slideIndex--;  /* уменьшаем на единицу */\r\n    }\r\n\r\n    if (slides.length < 10) {\r\n        current.textContent = `0${slideIndex}`;\r\n    } else {\r\n        current.textContent = slideIndex;\r\n    }\r\n\r\n    dots.forEach(dot => dot.style.opacity = '.5');  \r\n    dots[slideIndex - 1].style.opacity = 1;\r\n});\r\n\r\ndots.forEach(dot => {    /* перебираем массив (в переменной!) Клики по точкам - перелистывание слайдера и меняется current(текущий слайд) */\r\n    dot.addEventListener('click', (e) => {\r\n        const slideTo = e.target.getAttribute('data-slide-to');\r\n\r\n        slideIndex = slideTo;\r\n        offset = deleteNotDigits(width) * (slideTo - 1); \r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n\r\n        dots.forEach(dot => dot.style.opacity = '.5');\r\n        dots[slideIndex - 1].style.opacity = 1;\r\n    });\r\n});\r\n\r\n      /* ОБЫЧНЫЙ СЛАЙДЕР (перменные те же!)  Убрать обёртку в вёрстке у слайдов */\r\n// let sliderIndex = 1;   /* Нумерация слайдов */\r\n\r\n// showSlides(sliderIndex);  /* Вызываем созданную функцию слайдера и помещаем внутрь начальное положение sliderIndex */\r\n\r\n\r\n/* Сколько всего слайдов total */\r\n// if (slides.length < 10) {\r\n//     total.textContent = `0${slides.length}`;  /* Если количество слайдов меньше нуля, то подставляем сначала 0 , а потом slides.length = общее количество слайдов */\r\n// } else {\r\n//     total.textContent = slides.length;   /* в других случаях просто длинну переменной slides (общее количество слайдов) */\r\n// }\r\n\r\n\r\n// function showSlides(n) {\r\n//     if (n > slides.length) {   /* Если n будет больше чем колличество слайдов, то перелистнётся на Первый слайд (вправо) !  */\r\n//         sliderIndex = 1;       /* Первый слайд  */\r\n//     }\r\n//     if (n < 1) {      /* Если n слайд будет мень первой позиции(нумерации) то покажется последний слайд (при перелистывании влево) */\r\n//         sliderIndex = slides.length;   /* slides.length считаем количество слайдов и присваиваем к slideIndex */\r\n//     }\r\n//     slides.forEach((item) => item.style.display = 'none');  /* Перебираем слайды и устанавливаем всем значения display none */\r\n//      /* Устанавливаем видимый слайд. Значение -1 в программировании = 0 то есть первому элементу(слайду) */\r\n//     slides[sliderIndex - 1].style.display = 'block'; /* Первому элементу ставим display block \r\n//      Из переменной let sliderIndex = 1 приходит единица от неё отнимаем единицу = 0 то есть в прграммировании это первый элемент*/\r\n\r\n/* Или через классы*/\r\n// slides.forEach((item) => item.classList.add('hide','fade'));\r\n // slides[sliderIndex - 1].classList.remove('hide');\r\n\r\n\r\n /* Показываем текущий слайд  current*/\r\n//     if (slides.length < 10) {   /* Счётчик текущего слайда !!! */\r\n//         current.textContent = `0${sliderIndex}`;  /* Если количество слайдов меньше нуля, то подставляем сначала 0 */\r\n//     } else {\r\n//         current.textContent = sliderIndex;   /* в других случаях просто длинну переменной slides (общее количество слайдов) */\r\n//     }\r\n// }\r\n\r\n// function plusSlides (n) {\r\n//     showSlides(sliderIndex += n);  /* Увеличиваем sliderIndex на \"n\" пришедшее из значения Стрелок prev next  */\r\n// }\r\n\r\n// prev.addEventListener('click', () => {   /* Предыдущий слайд стрелка влево */\r\n//     plusSlides(-1);  /* Передаём в функцию plusSlides значение -1 */\r\n// });\r\n\r\n// next.addEventListener('click', () => {  /* Следующий слайд стрелка вправо */\r\n//     plusSlides(1);  /* Передаём в функцию plusSlides значение +1 */\r\n// });\r\n\r\n/* Конец слайдера!  */\r\n}\r\n\r\nmodule.exports = slider;","function tabs() {\r\n    const tabs = document.querySelectorAll('.tabheader__item'),\r\n          tabsContent = document.querySelectorAll('.tabcontent'),\r\n          tabsParent = document.querySelector('.tabheader__items');\r\n\r\n    function hideTabContent () {\r\n        tabsContent.forEach(item => {\r\n            item.classList.add('hide');\r\n            item.classList.remove('show', 'fade');\r\n        });\r\n        tabs.forEach(item => {\r\n            item.classList.remove('tabheader__item_active');  /* точку перед классом не ставим, т.к. работаем с командой classList */\r\n        });\r\n    }\r\n\r\n    function showTabContent(i = 0) {\r\n        tabsContent[i].classList.add('show', 'fade');\r\n        tabsContent[i].classList.remove('hide');\r\n        tabs[i].classList.add('tabheader__item_active');\r\n    }\r\n    hideTabContent();\r\n    showTabContent();\r\n\r\n    tabsParent.addEventListener('click', (event) => {\r\n        const target = event.target;\r\n\r\n        if (target && target.classList.contains('tabheader__item')) {\r\n            tabs.forEach((item, i) => {\r\n                if (target == item) {\r\n                    hideTabContent();\r\n                    showTabContent(i);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = tabs;","function timer() {\r\n\r\n    /*      TIMER   --------------------------------------------------------------------------------- */\r\n\r\n    const deadline = '2021-05-11';\r\n\r\n    function getTimeRemaining(endtime) {\r\n        const t = Date.parse(endtime) - Date.parse(new Date()),\r\n              days = Math.floor(t / (1000 * 60 * 60 * 24)),   /* Считаем сколько милисекунд в минуте, в часе, в дне */\r\n              hours = Math.floor((t / (1000 * 60 * 60) %  24)),   /* общее кол часов */\r\n              minutes = Math.floor((t / 1000 / 60) % 60),\r\n              seconds = Math.floor((t / 1000) % 60);\r\n        return {\r\n            'total': t,\r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        };\r\n    }\r\n\r\n    function getZero(num) {    /* Добавление нуля перед цифрами до 10 */\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`;\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n\r\n    function setClock(selector, endtime) {\r\n        const timer = document.querySelector(selector),\r\n        days = timer.querySelector('#days'),\r\n        hours = timer.querySelector('#hours'),\r\n        minutes = timer.querySelector('#minutes'),\r\n        seconds = timer.querySelector('#seconds'),\r\n        timeInterval = setInterval(updateClock, 1000);\r\n\r\n        updateClock();  /* Запускаем функцию чтобы не мигал таймер */\r\n\r\n        function updateClock() {\r\n            const t = getTimeRemaining(endtime);\r\n            days.innerHTML = getZero(t.days);\r\n            hours.innerHTML = getZero(t.hours);\r\n            minutes.innerHTML = getZero(t.minutes);\r\n            seconds.innerHTML = getZero(t.seconds);\r\n\r\n            if (t.total <= 0) {\r\n                clearInterval(timeInterval);\r\n            }\r\n        }\r\n    }\r\n\r\nsetClock('.timer', deadline);\r\n\r\n}\r\n\r\nmodule.exports = timer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\r\n/* Для запуска Сервера json сипользовать команду ->  npx json-server db.json */\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const tabs = require('./modules/tabs'),\r\n          modal = require('./modules/modal'),\r\n          timer =require('./modules/timer'),\r\n          cards = require('./modules/cards'),\r\n          calc = require('./modules/calc'),\r\n          forms = require('./modules/forms'),\r\n          slider = require('./modules/slider');\r\n\r\n    tabs();\r\n    modal();\r\n    timer();\r\n    cards();\r\n    calc();\r\n    forms();\r\n    slider();\r\n\r\n});  /* Конец -------------------- */\r\n\r\n"],"sourceRoot":""}